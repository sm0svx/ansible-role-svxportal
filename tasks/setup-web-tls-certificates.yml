---
- name: Ensure that all certificate paths exist
  tags: certificate
  file:
    name: "{{ item | dirname }}"
    state: directory
  with_items:
    - "{{ svxportal_tls_key_path }}"
    - "{{ svxportal_tls_csr_path }}"
    - "{{ svxportal_tls_crt_path }}"
  loop_control:
    label: "{{ item | dirname }}"

- name: Generate a private key for the certificate
  tags: certificate
  openssl_privatekey:
    path: "{{ svxportal_tls_key_path }}"
    type: RSA
    size: 4096
    owner: root
    group: ssl-cert
    mode: 0640
    state: present

- name: Generate a certificate signing request
  tags: certificate
  openssl_csr:
    path: "{{ svxportal_tls_csr_path }}"
    privatekey_path: "{{ svxportal_tls_key_path }}"
    common_name: "{{ svxportal_public_hostname }}"
    #use_common_name_for_san: yes
    subject_alt_name: "{{ svxportal_tls_subject_alt_name }}"
    #force: yes
    digest: sha256
    owner: root
    group: root
    mode: 0644
    state: present
  register: openssl_csr

- block:
    - name: Load ACME accout key
      tags: certificate
      include_vars: "{{ svxportal_tls_acme_key_vault_path }}"
  rescue:
    - name: Generate an ACME account key
      tags: certificate
      vars:
        ansible_become: false
      openssl_privatekey:
        path: "{{ svxportal_tls_acme_key_path }}"
        type: RSA
        size: 4096
        #owner: root
        #group: ssl-cert
        mode: 0600
        state: present
      delegate_to: localhost

    - name: Manually encrypt the ACME account key
      tags: certificate
      pause:
        prompt: |-
          Run the following command manually, in another terminal, to create an
          encrypted version of the ACME account key.

            ansible-vault encrypt_string --stdin-name svxportal_tls_acme_account_key < {{ svxportal_tls_acme_key_path }} > {{ svxportal_tls_acme_key_vault_path }} && rm -f {{ svxportal_tls_acme_key_path }}

            When done, press ENTER to continue or Ctrl-C to abort

    - name: Load ACME accout key
      tags: certificate
      include_vars: "{{ svxportal_tls_acme_key_vault_path }}"

- name: Ensure ACME account is created and up to date
  tags: certificate
  vars:
    ansible_become: false
  acme_account:
    account_key_content: "{{ svxportal_tls_acme_account_key }}"
    #account_key_src: "{{ svxportal_tls_acme_key_path }}"
    acme_directory: "{{ svxportal_tls_acme_directory }}"
    acme_version: 2
    allow_creation: yes
    contact:
      "{{ svxportal_tls_acme_contact }}"
    state: present
    terms_agreed: "{{ svxportal_tls_acme_terms_agreed }}"
  delegate_to: localhost
  run_once: true

- name: Request cert signing if cert is nonexistent or if it's about to expire
  tags: certificate
  vars:
    ansible_become: false
  acme_certificate:
    acme_directory: "{{ svxportal_tls_acme_directory }}"
    acme_version: 2
    account_key_content: "{{ svxportal_tls_acme_account_key }}"
    #account_key_src: {{ svxportal_tls_acme_key }}
    challenge: http-01
    csr: "{{ svxportal_tls_csr_path }}"
    dest: "{{ svxportal_tls_crt_path }}"
    chain_dest: "{{ svxportal_tls_intermediate_path }}"
    #fullchain_dest: "{{ svxportal_tls_fullchain_path }}"
    remaining_days: "{{ svxportal_tls_acme_remaining_days_renew }}"
    modify_account: no
    force: "{{ openssl_csr is changed }}"
  register: acme_challenge

# FIXME: Make sure that the path to the challenge is safe, that it does not
# point to a directory outside of the webroot and that it does not overwrite
# any files it should not overwrite. What does the ACME standard say about the
# path for the challenge?
# RFC 8555: https://tools.ietf.org/html/rfc8555#section-8.3

#- name: Set up a dummy challenge for testing
#  tags: devel
#  set_fact:
#    acme_challenge:
#      changed: True
#      challenge_data:
#        sk3w.se:
#          http-01:
#            resource: ".well-known/dummy-challenge/ansible-test-dummy-challenge"
#            resource_value: |
#              This is a dummy challenge for sk3w.se used to test the Ansible playbooks
#        refelctor-sm.svxlink.org:
#          http-01:
#            resource: ".well-known/dummy-challenge/ansible-test-dummy-challenge"
#            resource_value: |
#              This is a dummy challenge for reflector-sm.svxlink.org used to test the Ansible playbooks

- name: Make sure that the challenge directory exist
  tags: certificate
  vars:
    hvars: "{{ hostvars[item[0]]|d(hostvars[inventory_hostname]) }}"
  file:
    path: "{{ hvars.svxportal_tls_acme_challenge_webroot|d(svxportal_html_dir) }}/{{ item[1].value['http-01']['resource'] | dirname }}"
    owner: "{{ hvars.svxportal_tls_acme_challenge_owner | d(omit) }}"
    group: "{{ hvars.svxportal_tls_acme_challenge_group | d(omit) }}"
    mode: 0755
    state: directory
  become: "{{ hvars.svxportal_tls_acme_challenge_become | d(omit) }}"
  delegate_to: "{{ item[0] }}"
  with_nested:
    - "{{ svxportal_tls_acme_challenge_delegate_to | d(inventory_hostname) }}"
    - "{{ acme_challenge['challenge_data'] | d({}) | dict2items }}"
  when: acme_challenge is changed

- name: Copy challenge to file
  tags: certificate
  vars:
    hvars: "{{ hostvars[item[0]]|d(hostvars[inventory_hostname]) }}"
  copy:
    dest: "{{ hvars.svxportal_tls_acme_challenge_webroot|d(svxportal_html_dir) }}/{{ item[1].value['http-01']['resource'] }}"
    content: "{{ item[1].value['http-01']['resource_value'] }}"
    owner: "{{ hvars.svxportal_tls_acme_challenge_owner | d(omit) }}"
    group: "{{ hvars.svxportal_tls_acme_challenge_group | d(omit) }}"
    mode: 0644
  become: "{{ hvars.svxportal_tls_acme_challenge_become | d(omit) }}"
  delegate_to: "{{ item[0] }}"
  with_nested:
    - "{{ svxportal_tls_acme_challenge_delegate_to | d(omit) }}"
    - "{{ acme_challenge['challenge_data'] | d({}) | dict2items }}"
  when: acme_challenge is changed

- name: Manually copy challenge to http web root
  tags: certificate
  pause:
    prompt: |-

      Manually copy the provided challenge to the webroot of the web server
      that serves on port 80 for {{ svxportal_public_hostname }}.

      The whole directory hierachy must be preserved as is.

      {% for item in acme_challenge['challenge_data'] | d({}) | dict2items %}
        {{ svxportal_tls_acme_challenge_webroot }}/{{ item.value['http-01']['resource'].split('/')[0] }}
      {% endfor %}

      Press ENTER to continue or Ctrl-C to abort
  when: svxportal_tls_acme_challenge_manual

- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  tags: certificate
  acme_certificate:
    acme_directory: "{{ svxportal_tls_acme_directory }}"
    acme_version: 2
    account_key_content: "{{ svxportal_tls_acme_account_key }}"
    #account_key_src: {{ svxportal_tls_acme_key }}
    challenge: http-01
    csr: "{{ svxportal_tls_csr_path }}"
    dest: "{{ svxportal_tls_crt_path }}"
    chain_dest: "{{ svxportal_tls_intermediate_path }}"
    #fullchain_dest: "{{ svxportal_tls_fullchain_path }}"
    remaining_days: "{{ svxportal_tls_acme_remaining_days_renew }}"
    modify_account: no
    data: "{{ acme_challenge }}"
    force: "{{ openssl_csr is changed }}"
  notify:
    - restart apache

- name: Clear ACME account key variable
  tags: certificate
  set_fact:
    svxportal_tls_acme_account_key:
